from main import binance_exchange, bybit_exchange, okex_exchange, Update, CallbackContext, random, ccxt, MessageHandler, Filters

def get_random_10_coins_info(update: Update, context: CallbackContext) -> None:
    exchanges = {'Binance': binance_exchange, 'Bybit': bybit_exchange, 'OKX': okex_exchange}
    coins_info_list = []

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π USDT
        binance_markets = [market['symbol'] for market in binance_exchange.fetch_markets()]
        bybit_markets = [market['symbol'] for market in bybit_exchange.fetch_markets()]
        okex_markets = [market['symbol'] for market in okex_exchange.fetch_markets()]

        common_markets = list(set(binance_markets) & set(bybit_markets) & set(okex_markets))

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 10 –º–æ–Ω–µ—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_markets = random.sample(common_markets, min(10, len(common_markets)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['selected_markets'] = selected_markets

        for symbol in selected_markets:
            coin_info = {'Binance': '', 'Bybit': '', 'OKX': ''}

            for exchange_name, exchange in exchanges.items():
                try:
                    ticker = exchange.fetch_ticker(symbol)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã (last) –∏ –æ–±—ä–µ–º–∞ (baseVolume)
                    if 'last' in ticker and ticker['last'] is not None and 'baseVolume' in ticker and ticker['baseVolume'] > 150000:
                        price = ticker['last']
                        volume = ticker['baseVolume']
                        percent_change = ticker['percentage'] if 'percentage' in ticker else 0

                        coin_info[exchange_name] = f'\n–¶–µ–Ω–∞: {price}\nVolume: {volume}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change}%\n'

                    else:
                        coin_info[exchange_name] = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

                except ccxt.NetworkError as e:
                    print(f"Network error: {e}")
                except ccxt.ExchangeError as e:
                    print(f"Exchange error: {e}")

            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫
            if all(value != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' for value in coin_info.values()):
                coins_info_list.append((symbol, coin_info))

    except ccxt.NetworkError as e:
        update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except ccxt.ExchangeError as e:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∏—Ä–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if coins_info_list:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö
        for coin_symbol, coin_info in coins_info_list:
            response = f'üíµ {coin_symbol}.\n'
            for exchange_name, info in coin_info.items():
                response += f'üëâ {exchange_name}: {info}\n'
            
            update.message.reply_text(response)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ—â–µ 10 –º–æ–Ω–µ—Ç
        update.message.reply_text("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ—â–µ 10 –º–æ–Ω–µ—Ç? (–î–∞/–ù–µ—Ç)")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dp = context.dispatcher
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, show_more_random_coins_info))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 10 –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['coins_info_list'] = coins_info_list

    else:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π USDT –∏ –æ–±—ä–µ–º–æ–º –≤—ã—à–µ 150 —Ç—ã—Å.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ 10 –º–æ–Ω–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_more_random_coins_info(update: Update, context: CallbackContext) -> None:
    user_response = update.message.text.lower()

    if user_response == '–¥–∞':
        get_random_10_coins_info(update, context)
    elif user_response == '–Ω–µ—Ç':
        update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º.")
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dp = context.dispatcher
        dp.remove_handler(MessageHandler(Filters.text & ~Filters.command, show_more_random_coins_info))
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
