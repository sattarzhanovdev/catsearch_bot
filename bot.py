import ccxt
import time
import random
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, MessageHandler, Filters, CallbackContext

# –í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
telegram_bot_token = "6659955061:AAF-BsLyqbImLtb4oK3KSf3vcvcW7V5zatY"

# –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
from exchange_utils import binance_api_key, binance_api_secret, bybit_api_key, bybit_api_secret, okex_api_key, okex_api_secret
from exchange_utils import binance_exchange, bybit_exchange, okex_exchange
from exchange_utils import get_common_markets, fetch_ticker

from telegram.ext import MessageHandler, Filters, CallbackContext
from telegram import Update
from exchange_utils import binance_exchange, bybit_exchange, okex_exchange, get_common_markets, fetch_ticker



def start(update: Update, context: CallbackContext) -> None:
  update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –î–∞–Ω–∏–µ–ª –ê–∂–∏–µ–≤!\n–ö–æ–º–∞–Ω–¥—ã:\n/price –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã - —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã,–Ω–∞–ø—Ä–∏–º–µ—Ä: /price btc/usdt\n/all - –≤—Å–µ –º–æ–Ω–µ—Ç—ã')


def get_prices(update: Update, context: CallbackContext) -> None:
  symbol = context.args[0].upper()

  update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ê–∂–∏–µ–≤ –≤—ã–π–¥–µ—Ç –∏–∑ —Ç—é—Ä—å–º—ã...")

  time.sleep(5)

  update.message.reply_text("–î–∞–ª 500 000$ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–µ—Ç...")

  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
  binance_ticker = binance_exchange.fetch_ticker(symbol)
  bybit_ticker = bybit_exchange.fetch_ticker(symbol)
  okex_ticker = okex_exchange.fetch_ticker(symbol)

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  binance_price = binance_ticker['last']
  bybit_price = bybit_ticker['last']
  okex_price = okex_ticker['last']

  # Comparing prices and finding the cheapest and most expensive exchanges
  cheapest_exchange = min(binance_price, bybit_price, okex_price)
  most_expensive_exchange = max(binance_price, bybit_price, okex_price)

  binance_percent_change = binance_ticker['percentage'] if 'percentage' in binance_ticker else 0
  bybit_percent_change = bybit_ticker['percentage'] if 'percentage' in bybit_ticker else 0
  okex_percent_change = okex_ticker['percentage'] if 'percentage' in okex_ticker else 0

  price_difference = most_expensive_exchange - cheapest_exchange

  response = f'üíµ –¶–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è {symbol}:\n'
  response += f'üíµ Binance: –¶–µ–Ω–∞: {binance_price}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {binance_percent_change}%\n'
  response += f'üíµ Bybit: –¶–µ–Ω–∞: {bybit_price}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {bybit_percent_change}%\n'
  response += f'üíµ OKX: –¶–µ–Ω–∞: {okex_price}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {okex_percent_change}%\n'
  response += f'üü¢ –î–æ—Ä–æ–≥–∞—è —Ü–µ–Ω–∞: {most_expensive_exchange}\n'
  response += f'üî¥ –î–µ—à–µ–≤–∞—è —Ü–µ–Ω–∞: {cheapest_exchange}\n'
  response += f'üëå –†–∞–∑–Ω–∏—Ü–∞: {price_difference}'
  

  update.message.reply_text(response)
  update.message.reply_text("–ê–∂–∏–µ–≤ –≤—ã—à–µ–ª!")



def get_random_10_coins_info(update, context):
    exchanges = {'Binance': binance_exchange, 'Bybit': bybit_exchange, 'OKX': okex_exchange}
    coins_info_list = []

    try:
        common_markets = get_common_markets()

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 10 –º–æ–Ω–µ—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_markets = random.sample(common_markets, min(10, len(common_markets)))

        for symbol in selected_markets:
            coin_info = {'Binance': '', 'Bybit': '', 'OKX': ''}

            for exchange_name, exchange in exchanges.items():
                ticker = fetch_ticker(exchange, symbol)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã (last) –∏ –æ–±—ä–µ–º–∞ (baseVolume)
                if ticker and 'last' in ticker and ticker['last'] is not None and 'baseVolume' in ticker and ticker['baseVolume'] > 150000:
                    price = ticker['last']

                    volume = ticker['baseVolume']
                    percent_change = ticker['percentage'] if 'percentage' in ticker else 0

                    coin_info[exchange_name] = f'\n–¶–µ–Ω–∞: {price}\nVolume: {volume}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change}%\n'


                else:
                    coin_info[exchange_name] = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫
            if all(value != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' for value in coin_info.values()):
                coins_info_list.append((symbol, coin_info))

    except ccxt.NetworkError as e:
        update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except ccxt.ExchangeError as e:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∏—Ä–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if coins_info_list:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö
        for coin_symbol, coin_info in coins_info_list:
            response = f'üíµ {coin_symbol}.\n'
            for exchange_name, info in coin_info.items():
              response += f'üëâ {exchange_name}: {info}\n'

            update.message.reply_text(response)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ—â–µ 10 –º–æ–Ω–µ—Ç
        update.message.reply_text("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ—â–µ 10 –º–æ–Ω–µ—Ç? (–î–∞/–ù–µ—Ç)")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dp = context.dispatcher
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, show_more_random_coins_info))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 10 –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['coins_info_list'] = coins_info_list

    else:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π USDT –∏ –æ–±—ä–µ–º–æ–º –≤—ã—à–µ 150 —Ç—ã—Å.")


def show_more_random_coins_info(update: Update, context: CallbackContext) -> None:
    user_response = update.message.text.lower()

    if user_response == '–¥–∞':
        get_random_10_coins_info(update, context)
    elif user_response == '–Ω–µ—Ç':
        update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º.")
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dp = context.dispatcher
        dp.remove_handler(MessageHandler(Filters.text & ~Filters.command, show_more_random_coins_info))
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
def main():
    updater = Updater(telegram_bot_token)

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("price", get_prices, pass_args=True))
    dp.add_handler(CommandHandler("all", get_random_10_coins_info))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
